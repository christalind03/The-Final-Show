using UnityEngine;
using Mirror;
using Steamworks;

/// <summary>
/// Controls the different aspects related to steam lobby creation, players can leave, join, create lobbies
/// Works with the ui manager script to switch the ui based on the button that was pressed
/// </summary>
public class SteamLobby : MonoBehaviour
{
    // Callbacks for lobby 
    protected Callback<LobbyCreated_t> LobbyCreated;
    protected Callback<GameLobbyJoinRequested_t> LobbyRequest;
    protected Callback<LobbyEnter_t> LobbyEntered;

    // Variables
    private const string HostAddressKey = "HostAddress";
    private CustomNetworkManager manager;

    // Gameobjects
    private UIManager uIManagar;

    /// <summary>
    /// When the game starts, this will find all the required GameObjects to let the script run and 
    /// create functions for the different callbacks
    /// </summary>
    private void Start()
    {
        GameObject lobbyUI = GameObject.Find("LobbyUI");
        uIManagar = lobbyUI.GetComponent<UIManager>();
        manager = GetComponent<CustomNetworkManager>();

        // if the steam manager is not initialized, the script that controls steam in the backend, it will create any of the callbacks functions
        if (!SteamManager.Initialized) { return; }

        LobbyCreated = Callback<LobbyCreated_t>.Create(OnLobbyCreated);
        LobbyEntered = Callback<LobbyEnter_t>.Create(OnLobbyEntered);
        LobbyRequest = Callback<GameLobbyJoinRequested_t>.Create(OnLobbyRequest);

    }

    /// <summary>
    /// When a user joins the game via steam ui, this function is called to let them join the lobby
    /// </summary>
    /// <param name="callback">The callback associated when steam request to join a lobby</param>
    private void OnLobbyRequest(GameLobbyJoinRequested_t callback)
    {
        SteamMatchmaking.JoinLobby(callback.m_steamIDLobby);
    }

    /// <summary>
    /// When the lobby is created, assigns some metadata to the lobby that will be used for connection and message display
    /// </summary>
    /// <param name="callback">The callback associated when a lobby is created</param>
    private void OnLobbyCreated(LobbyCreated_t callback)
    {
        // Make sure the lobby is actually create
        if (callback.m_eResult != EResult.k_EResultOK) { return; }

        manager.LobbyId = ToBase62(callback.m_ulSteamIDLobby);
        manager.StartHost();


        // Assign the metadata, HostAddressKey and "name"
        SteamMatchmaking.SetLobbyData(new CSteamID(callback.m_ulSteamIDLobby), HostAddressKey, SteamUser.GetSteamID().ToString());
        SteamMatchmaking.SetLobbyData(new CSteamID(callback.m_ulSteamIDLobby), "name", SteamFriends.GetPersonaName().ToString());
    }

    /// <summary>
    /// When the player enter a steam lobby, do different task according to if the player is the server or client
    /// </summary>
    /// <param name="callback">The callback associated when a player enters the lobby</param>
    private void OnLobbyEntered(LobbyEnter_t callback)
    {
        // Server: N/A


        // Client: checks if the lobby exists, if it does not, runs invalid lobby and short circuit the client code
        if (!NetworkServer.active)
        {
            if (string.IsNullOrWhiteSpace(SteamMatchmaking.GetLobbyData(new CSteamID(callback.m_ulSteamIDLobby), HostAddressKey)))
            {
                uIManagar.invalidLobby();
                return;
            }

            // Assign the network address for the client's manager and start the client 
            manager.networkAddress = SteamMatchmaking.GetLobbyData(new CSteamID(callback.m_ulSteamIDLobby), HostAddressKey);
            manager.StartClient();
        }

        // Everyone: nothing right now
    }

    /// <summary>
    /// Creates lobby 
    /// </summary>
    public void HostLobby()
    {
        SteamMatchmaking.CreateLobby(ELobbyType.k_ELobbyTypeFriendsOnly, manager.maxConnections);
    }

    /// <summary>
    /// !!Following Code was generated by ChatGPT!!
    /// It is only used for convert lobbyID from UInt64 to Base62
    /// </summary>
    /// <param name="number">the lobby Id</param>
    /// <returns>the value of the converted lobby code</returns>
    public string ToBase62(ulong number)
    {
        const string chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
        if (number == 0) return "0";

        string result = "";
        while (number > 0)
        {
            result = chars[(int)(number % 62)] + result;
            number /= 62;
        }
        return result;
    }

    /// <summary>
    /// !!Following Code was generated by ChatGPT!!
    /// It is only used for convert lobbyID from Base62 to UInt64
    /// </summary>
    /// <param name="base62">lobby Id when unconverted</param>
    /// <returns></returns>
    private ulong FromBase62(string base62)
    {
        const string chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
        ulong result = 0;

        foreach (char c in base62)
        {
            result = result * 62 + (ulong)chars.IndexOf(c);
        }
        return result;
    }

    /// <summary>
    /// Joins the lobby based on a lobbyID
    /// </summary>
    /// <param name="lobbyID">The unique steam lobby ID</param>
    public void JoinLobby(string lobbyID)
    {
        ulong RevertedLobbyId = FromBase62(lobbyID);
        CSteamID cLobbyID = new CSteamID(RevertedLobbyId);

        // Checks if the lobbyID is a valid ID
        if (cLobbyID.IsValid())
        {
            SteamMatchmaking.JoinLobby(cLobbyID);
        }
        else
        {
            uIManagar.invalidLobby();
        }
    }

    /// <summary>
    /// Leaves the steam lobby 
    /// </summary>
    public void LeaveLobby()
    {
        // If you are the host, it will set the lobby to not joinable and delete the HostAddressKey
        ulong lobbyId = FromBase62(manager.LobbyId);
        if (NetworkServer.active)
        {
            manager.StopHost();
            SteamMatchmaking.SetLobbyJoinable(new CSteamID(lobbyId), false);
            SteamMatchmaking.DeleteLobbyData(new CSteamID(lobbyId), HostAddressKey);
        }
        // If you are the client, just stops the client 
        else
        {
            manager.StopClient();
        }

        SteamMatchmaking.LeaveLobby(new CSteamID(lobbyId));
    }

    /// <summary>
    /// Returns if you are the host of the lobby
    /// </summary>
    /// <returns>If you are or are not the host</returns>
    public bool isHost()
    {
        return NetworkServer.active;
    }
}